#Q2

import time
import matplotlib.pyplot as plt

# Bottom-up 
def fibonacci_bottom_up_with_count(n):
    fib = [0] * (n + 1)
    fib[1] = 1
    fib_4_count = 0 # Counter for F(4) computations
    for i in range(2, n + 1):
        fib[i] = fib[i - 1] + fib[i - 2]
        if i >= 5:
            fib_4_count += fib[i - 4] # Count F(4) computations
    return fib_4_count

# Calculate the times F(4) computed when computing F(5), F(6), ..., F(50)
fib_4_counts = []

for i in range(5, 51):
    fib_4_counts.append(fibonacci_bottom_up_with_count(i))
    print(f"F(4) computed during calculation of F({i})")

# Plot the results
plt.plot(range(5, 51), fib_4_counts)
plt.title("Count of F(4) Computed During Calculation of F(5) to F(50)")
plt.xlabel("Fibonacci Number")
plt.ylabel("Count of F(4) Computations")
plt.show()



#%%



fib_4_count = 0

# Top-down 
def fibonacci_top_down_with_count(n, memo={}):
    global fib_4_count
    
    # Base cases
    if n == 0:
        return 0
    elif n == 1:
        return 1
    
    # Check if the result is already memoized
    if n in memo:
        return memo[n]
    
    # Increment the count if computing F(4)
    if n == 4:
        fib_4_count += 1
    
    # Recursive calls to compute Fibonacci numbers
    memo[n] = fibonacci_top_down_with_count(n - 1, memo) + fibonacci_top_down_with_count(n - 2, memo)
    return memo[n]


for i in range(5, 51):
    fib_4_counts.append(fibonacci_top_down_with_count(i))
    print(f"F(4) computed during calculation of F({i})")

# Plot the results
plt.plot(range(5, 51), fib_4_counts)
plt.title("Count of F(4) Computed During Calculation of F(5) to F(50)")
plt.xlabel("Fibonacci Number")
plt.ylabel("Count of F(4) Computations")
plt.show()
